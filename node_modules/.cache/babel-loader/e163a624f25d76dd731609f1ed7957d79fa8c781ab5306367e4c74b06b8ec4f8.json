{"ast":null,"code":"var _jsxFileName = \"/Users/roman/WebstormProjects/fulstack/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tg = window.Telegram.WebApp;\nfunction App() {\n  _s();\n  var _tg$initDataUnsafe, _tg$initDataUnsafe$us;\n  useEffect(() => {\n    tg.expand();\n  }, []);\n  const ID = Number((_tg$initDataUnsafe = tg.initDataUnsafe) === null || _tg$initDataUnsafe === void 0 ? void 0 : (_tg$initDataUnsafe$us = _tg$initDataUnsafe.user) === null || _tg$initDataUnsafe$us === void 0 ? void 0 : _tg$initDataUnsafe$us.id);\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    fetch('/count', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"id\": ID\n      })\n    }).then(response => response.json()).then(response => setCount(response));\n  }, []);\n  const handleImageClick = event => {\n    setCount(count + 1);\n    fetch('/inc', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"id\": ID\n      })\n    });\n    if (\"vibrate\" in navigator) {\n      navigator.vibrate(200);\n    }\n  };\n  useEffect(() => {\n    tg.ready();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"circle\",\n      id: \"circ\",\n      src: `/images/homyak.png`,\n      alt: \"qq\",\n      onClick: handleImageClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"d7mhqQdUiM/DLzN937+gAidWeXQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","tg","window","Telegram","WebApp","App","_s","_tg$initDataUnsafe","_tg$initDataUnsafe$us","expand","ID","Number","initDataUnsafe","user","id","count","setCount","fetch","method","headers","body","JSON","stringify","then","response","json","handleImageClick","event","navigator","vibrate","ready","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/roman/WebstormProjects/fulstack/frontend/src/App.js"],"sourcesContent":["import {useState, useEffect} from \"react\";\nconst tg = window.Telegram.WebApp;\n\nfunction App() {\n    useEffect( () => {\n        tg.expand();\n    }, []);\n\n  const ID = Number(tg.initDataUnsafe?.user?.id);\n  const [count, setCount] = useState(0);\n\n\n  useEffect (() => {\n      fetch('/count', {\n          method: 'POST',\n          headers: {'Content-Type':'application/json'},\n          body: JSON.stringify({\n              \"id\": ID\n          })\n      }).then(response => response.json()).then(response => setCount(response))\n  }, [])\n\n\n  const handleImageClick = (event) => {\n    setCount(count + 1);\n      fetch('/inc', {\n          method: 'POST',\n          headers: {'Content-Type':'application/json'},\n          body: JSON.stringify({\n              \"id\": ID\n          })\n      });\n      if (\"vibrate\" in navigator) {\n          navigator.vibrate(200);\n      }\n  };\n\n    useEffect(() => {\n        tg.ready();\n    }, []);\n  return (\n      <div style={{textAlign: 'center', marginTop: '50px'}}>\n        <h1>{count}</h1>\n\n        <img className={\"circle\"}\n             id={\"circ\"}\n            src={`/images/homyak.png`}\n            alt={\"qq\"}\n            onClick={handleImageClick}\n        />\n\n      </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAAQA,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1C,MAAMC,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,kBAAA,EAAAC,qBAAA;EACXV,SAAS,CAAE,MAAM;IACbG,EAAE,CAACQ,MAAM,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAER,MAAMC,EAAE,GAAGC,MAAM,EAAAJ,kBAAA,GAACN,EAAE,CAACW,cAAc,cAAAL,kBAAA,wBAAAC,qBAAA,GAAjBD,kBAAA,CAAmBM,IAAI,cAAAL,qBAAA,uBAAvBA,qBAAA,CAAyBM,EAAE,CAAC;EAC9C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EAGrCC,SAAS,CAAE,MAAM;IACbmB,KAAK,CAAC,QAAQ,EAAE;MACZC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAC;MAAkB,CAAC;MAC5CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjB,IAAI,EAAEZ;MACV,CAAC;IACL,CAAC,CAAC,CAACa,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAACF,IAAI,CAACC,QAAQ,IAAIR,QAAQ,CAACQ,QAAQ,CAAC,CAAC;EAC7E,CAAC,EAAE,EAAE,CAAC;EAGN,MAAME,gBAAgB,GAAIC,KAAK,IAAK;IAClCX,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IACjBE,KAAK,CAAC,MAAM,EAAE;MACVC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAC;MAAkB,CAAC;MAC5CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjB,IAAI,EAAEZ;MACV,CAAC;IACL,CAAC,CAAC;IACF,IAAI,SAAS,IAAIkB,SAAS,EAAE;MACxBA,SAAS,CAACC,OAAO,CAAC,GAAG,CAAC;IAC1B;EACJ,CAAC;EAEC/B,SAAS,CAAC,MAAM;IACZG,EAAE,CAAC6B,KAAK,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EACR,oBACI9B,OAAA;IAAK+B,KAAK,EAAE;MAACC,SAAS,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAM,CAAE;IAAAC,QAAA,gBACnDlC,OAAA;MAAAkC,QAAA,EAAKnB;IAAK;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEhBtC,OAAA;MAAKuC,SAAS,EAAE,QAAS;MACpBzB,EAAE,EAAE,MAAO;MACZ0B,GAAG,EAAE,oBAAqB;MAC1BC,GAAG,EAAE,IAAK;MACVC,OAAO,EAAEhB;IAAiB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEC,CAAC;AAEZ;AAAChC,EAAA,CAlDQD,GAAG;AAAAsC,EAAA,GAAHtC,GAAG;AAoDZ,eAAeA,GAAG;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}